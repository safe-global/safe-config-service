# Default values are optimized for production to avoid having to configure
# much in production.
#
# However it should be easy to get going in development too. If you see an
# uncommented option that means it's either mandatory to set it or it's being
# overwritten in development to make your life easier.

# In development avoid writing out bytecode to __pycache__ directories.
PYTHONDONTWRITEBYTECODE=true

# You should generate a random string of 50+ characters for this value in prod.
SECRET_KEY=insecure_key_for_dev

# This should never be set to true in production but it should be enabled in dev.
DEBUG=true

# Root log level (default is INFO)
# Possible values are DEBUG | INFO | WARNING | ERROR | CRITICAL
ROOT_LOG_LEVEL=INFO

# A comma separated list of allowed hosts. In production this should be your
# domain name, such as "example.com,www.example.com" or ".example.com" to
# support both example.com and all sub-domains for your domain.
#
# This is being overwritten in development to support multiple Docker dev
# environments where you might be connecting over a local network IP address
# instead of localhost. You should not use "*" in production.
DJANGO_ALLOWED_HOSTS=".localhost,127.0.0.1,[::1]"

# The bind port for gunicorn.
#
# Be warned that if you change this value you'll need to change 8000 in both
# your Dockerfile and in a few spots in docker-compose.yml due to the nature of
# how this value can be set (Docker Compose doesn't support nested ENV vars).
GUNICORN_BIND_PORT=8000

# Docker Nginx Volume Root
DOCKER_NGINX_VOLUME_ROOT=/nginx

# The bind socket for gunicorn
GUNICORN_BIND_SOCKET=unix:${DOCKER_NGINX_VOLUME_ROOT}/gunicorn.socket

# The port exposed to the host by the nginx image.
NGINX_HOST_PORT=8080

# A directory where the result of executing envsubst is output (default: /etc/nginx/conf.d)
# Used by the nginx docker image in the templating system in order to use the environment variables set
NGINX_ENVSUBST_OUTPUT_DIR=/etc/nginx/

# Should the Webpack watcher use polling? Not all Docker hosts support inotify.
# If you find your assets aren't updating in development then set this to true.
#WEBPACK_WATCHER_POLL=false

# You'll always want to set the POSTGRES_USER and POSTGRES_PASSWORD since the
# postgres Docker image uses them for its default database user and password.
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres
POSTGRES_NAME=postgres
POSTGRES_HOST=localhost
POSTGRES_PORT=5432

# Specify additional options to be passed to the postgres connection string.
# This is useful for SSL connections to a postgres database.
# POSTGRES_OPTIONS={
# "sslmode": "verify-ca"
# "sslrootcert": "/certs/ca.crt",
# "sslcert": "/certs/client.crt",
# "sslkey": "/certs/client.key"
# }

# What volume path should be used? In development we want to volume mount
# everything so we can develop our code without rebuilding our Docker images.
# DOCKER_WEB_VOLUME=.:/app

# Restart workers when code changes.
# This setting is intended for development. It will cause workers to be restarted whenever application code changes.
GUNICORN_WEB_RELOAD=false

# The Client Gateway URL. This is for triggering webhooks to invalidate its cache for example
#CGW_URL=http://127.0.0.1

# The Client Gateway /v1/hooks/events token.
#CGW_AUTH_TOKEN=example-auth-token

# The maximum number of retries to be done when connecting to the Safe Client Gateway
#CGW_SESSION_MAX_RETRIES=0

# The request timeout in seconds for requests done to the Safe Client Gateway
#CGW_SESSION_TIMEOUT_SECONDS=2

# What CPU and memory constraints will be added to your services? When left at
# 0, they will happily use as much as needed.
#DOCKER_POSTGRES_CPUS=0
#DOCKER_POSTGRES_MEMORY=0
#DOCKER_REDIS_CPUS=0
#DOCKER_REDIS_MEMORY=0
#DOCKER_WEB_CPUS=0
#DOCKER_WEB_MEMORY=0
#DOCKER_WORKER_CPUS=0
#DOCKER_WORKER_MEMORY=0

# Default file storage class to be used for any file-related operations that don’t specify a particular storage system.
# storages.backends.s3boto3.S3Boto3Storage – Used for S3 configuration (AWS needs to be configured)
# django.core.files.storage.FileSystemStorage – Django default
DEFAULT_FILE_STORAGE=django.core.files.storage.FileSystemStorage
#DEFAULT_FILE_STORAGE=storages.backends.s3boto3.S3Boto3Storage

# django-storages – Amazon S3 configuration
# See https://django-storages.readthedocs.io/en/latest/backends/amazon-S3.html

# Your Amazon Web Services access key, as a string.
#AWS_ACCESS_KEY_ID=

# Your Amazon Web Services secret access key, as a string.
#AWS_SECRET_ACCESS_KEY=

# Your Amazon Web Services storage bucket name, as a string.
#AWS_STORAGE_BUCKET_NAME=

# If you're using S3 as a CDN (via CloudFront), you'll probably want this storage to serve those files using tha
# This is just the domain name ie.: no protocol should be set here and it should not end in a slash `/`
# eg.: AWS_S3_CUSTOM_DOMAIN=cdn.mydomain.com
#AWS_S3_CUSTOM_DOMAIN=

# CSRF protection
# See https://docs.djangoproject.com/en/dev/ref/settings/#csrf-trusted-origins
CSRF_TRUSTED_ORIGINS="http://localhost:${NGINX_HOST_PORT}"
#CSRF_TRUSTED_ORIGINS="https://safe-config.staging.gnosisdev.com,http://safe-config.staging.gnosisdev.com"
#CSRF_TRUSTED_ORIGINS="https://safe-config.gnosis.io,http://safe-config.gnosis.io"

# Enable this environment variable if your app is behind a proxy to use the `HTTP_X_FORWARDED_PROTO` header
# for secure request detection (HTTPS).
# See https://docs.djangoproject.com/en/dev/ref/settings/#secure-proxy-ssl-header
# USE_PROXY_SSL_HEADER=true
